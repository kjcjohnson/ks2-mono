 
(declare-term-types (sort (identifier "S")) (sort (identifier "E")) (sort (identifier "B"))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$assign_x") :children (list (sort (identifier "E")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$assign_y") :children (list (sort (identifier "E")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$assign_z") :children (list (sort (identifier "E")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$cons") :children (list (sort (identifier "S")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$ite") :children (list (sort (identifier "B")) (sort (identifier "S")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$while") :children (list (sort (identifier "B")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$1") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$x") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$y") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$z") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$+") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$-") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$return_z") :children (list (sort (identifier "S")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$t") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$f") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$not") :children (list (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$and") :children (list (sort (identifier "B")) (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$or") :children (list (sort (identifier "B")) (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$<") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(declare-function (identifier "S.Sem") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "S.Sem") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2")) :body (match :term (variable (identifier "t0") :sort (sort (identifier "S"))) :binders (list (binder :operator (identifier "$assign_x") :arguments (list (identifier "t1")) :child (exists :bindings (list (identifier "r1")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$assign_y") :arguments (list (identifier "t1")) :child (exists :bindings (list (identifier "r1")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$assign_z") :arguments (list (identifier "t1")) :child (exists :bindings (list (identifier "r1")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$cons") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "x1") (identifier "y1") (identifier "z1")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "S"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "x1") :sort (sort (identifier "Int"))) (variable (identifier "y1") :sort (sort (identifier "Int"))) (variable (identifier "z1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "S"))) (variable (identifier "x1") :sort (sort (identifier "Int"))) (variable (identifier "y1") :sort (sort (identifier "Int"))) (variable (identifier "z1") :sort (sort (identifier "Int"))) (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :child (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (exists :bindings (list (identifier "b")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "S"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (exists :bindings (list (identifier "b")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t3") :sort (sort (identifier "S"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$while") :arguments (list (identifier "t1") (identifier "t2")) :child (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (exists :bindings (list (identifier "b") (identifier "x1") (identifier "y1") (identifier "z1")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "S"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "x1") :sort (sort (identifier "Int"))) (variable (identifier "y1") :sort (sort (identifier "Int"))) (variable (identifier "z1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t0") :sort (sort (identifier "S"))) (variable (identifier "x1") :sort (sort (identifier "Int"))) (variable (identifier "y1") :sort (sort (identifier "Int"))) (variable (identifier "z1") :sort (sort (identifier "Int"))) (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (exists :bindings (list (identifier "b")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x0") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) :return-sort (sort (identifier "Bool"))))))))) 
(define-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :body (match :term (variable (identifier "t0") :sort (sort (identifier "E"))) :binders (list (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$x") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$z") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$+") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$-") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$return_z") :arguments (list (identifier "t1")) :child (exists :bindings (list (identifier "x2") (identifier "y2") (identifier "z2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "S"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :body (match :term (variable (identifier "t0") :sort (sort (identifier "B"))) :binders (list (binder :operator (identifier "$t") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$f") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$<") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$and") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$or") :arguments (list (identifier "t1") (identifier "t2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$not") :arguments (list (identifier "t1")) :child (exists :bindings (list (identifier "r1")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "r1")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "r1")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$assign_x") :arguments (list (identifier "t1")) :argument-sorts (list (sort (identifier "E"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "r1")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "r1")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$assign_y") :arguments (list (identifier "t1")) :argument-sorts (list (sort (identifier "E"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "r1")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "r1")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$assign_z") :arguments (list (identifier "t1")) :argument-sorts (list (sort (identifier "E"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x1") (identifier "y1") (identifier "z1"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x1") (identifier "y1") (identifier "z1") (identifier "x2") (identifier "y2") (identifier "z2")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "x1") (identifier "y1") (identifier "z1")) :constraint (term (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$cons") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "b"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "b")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "b"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t3") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "b")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "b"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x1") (identifier "y1") (identifier "z1"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x1") (identifier "y1") (identifier "z1") (identifier "x2") (identifier "y2") (identifier "z2")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "b") (identifier "x1") (identifier "y1") (identifier "z1")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$while") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "b")))) :input-variables (list (identifier "x0") (identifier "y0") (identifier "z0")) :output-variables (list (identifier "x2") (identifier "y2") (identifier "z2")) :variables (list (identifier "t0") (identifier "x0") (identifier "y0") (identifier "z0") (identifier "x2") (identifier "y2") (identifier "z2") (identifier "b")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x2") :sort (sort (identifier "Int"))) (variable (identifier "x0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y2") :sort (sort (identifier "Int"))) (variable (identifier "y0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z2") :sort (sort (identifier "Int"))) (variable (identifier "z0") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$while") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$z") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "z") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$+") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "z") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$-") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "x2") (identifier "y2") (identifier "z2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "x2") (identifier "y2") (identifier "z2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "z2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$return_z") :arguments (list (identifier "t1")) :argument-sorts (list (sort (identifier "S"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$t") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$f") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "z") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$<") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1"))) (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "z") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$and") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1"))) (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "z") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$or") :arguments (list (identifier "t1") (identifier "t2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "z") (identifier "r1")))) :input-variables (list (identifier "x") (identifier "y") (identifier "z")) :output-variables (list (identifier "r")) :variables (list (identifier "t0") (identifier "x") (identifier "y") (identifier "z") (identifier "r") (identifier "r1")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$not") :arguments (list (identifier "t1")) :argument-sorts (list (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(synth-fun (identifier "mul_by_while") :term-type (sort (identifier "E")) :grammar (grammar :non-terminals (list (identifier "_Start") (identifier "_Outer") (identifier "_S") (identifier "_E") (identifier "_A") (identifier "_B")) :non-terminal-types (list (sort (identifier "E")) (sort (identifier "S")) (sort (identifier "S")) (sort (identifier "E")) (sort (identifier "E")) (sort (identifier "B"))) :productions (list (production :instance (identifier "_Start") :occurrences (list (identifier "_Outer")) :operator (identifier "$return_z")) (production :instance (identifier "_Outer") :occurrences (list (identifier "_B") (identifier "_S")) :operator (identifier "$while")) (production :instance (identifier "_S") :occurrences (list (identifier "_E")) :operator (identifier "$assign_x")) (production :instance (identifier "_S") :occurrences (list (identifier "_E")) :operator (identifier "$assign_y")) (production :instance (identifier "_S") :occurrences (list (identifier "_E")) :operator (identifier "$assign_z")) (production :instance (identifier "_S") :occurrences (list (identifier "_S") (identifier "_S")) :operator (identifier "$cons")) (production :instance (identifier "_E") :occurrences (list (identifier "_A")) :operator nil) (production :instance (identifier "_E") :occurrences (list (identifier "_A") (identifier "_A")) :operator (identifier "$+")) (production :instance (identifier "_E") :occurrences (list (identifier "_A") (identifier "_A")) :operator (identifier "$-")) (production :instance (identifier "_A") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "_A") :occurrences (list) :operator (identifier "$1")) (production :instance (identifier "_A") :occurrences (list) :operator (identifier "$x")) (production :instance (identifier "_A") :occurrences (list) :operator (identifier "$y")) (production :instance (identifier "_A") :occurrences (list) :operator (identifier "$z")) (production :instance (identifier "_B") :occurrences (list (identifier "_A") (identifier "_A")) :operator (identifier "$<"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "mul_by_while") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 0 0 0 0) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "mul_by_while") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 1 1 0 1) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "mul_by_while") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 2 5 0 10) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "mul_by_while") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 4 3 0 12) :return-sort (sort (identifier "Bool"))))) 
(check-synth)