 
(set-info :format-version) 
(set-info :realizable) 
(declare-term-types (sort (identifier "S")) (sort (identifier "E")) (sort (identifier "B"))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$=x") :children (list (sort (identifier "E")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$=y") :children (list (sort (identifier "E")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$seq") :children (list (sort (identifier "S")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$ite") :children (list (sort (identifier "B")) (sort (identifier "S")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$x") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$y") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$1") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$+") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$<") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$and") :children (list (sort (identifier "B")) (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$not") :children (list (sort (identifier "B")))) 
(declare-function (identifier "sem-S") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "sem-E") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "sem-B") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "sem-S") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry")) :body (match :term (variable (identifier "st") :sort (sort (identifier "S"))) :binders (list (binder :operator (identifier "$=x") :arguments (list (identifier "et")) :child (exists :bindings (list (identifier "r")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$=y") :arguments (list (identifier "et")) :child (exists :bindings (list (identifier "r")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$seq") :arguments (list (identifier "st1") (identifier "st2")) :child (exists :bindings (list (identifier "xi1") (identifier "yi1")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "st1") :sort (sort (identifier "S"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "xi1") :sort (sort (identifier "Int"))) (variable (identifier "yi1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "st2") :sort (sort (identifier "S"))) (variable (identifier "xi1") :sort (sort (identifier "Int"))) (variable (identifier "yi1") :sort (sort (identifier "Int"))) (variable (identifier "rx") :sort (sort (identifier "Int"))) (variable (identifier "ry") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$ite") :arguments (list (identifier "bt") (identifier "st1") (identifier "st2")) :child (exists :bindings (list (identifier "r") (identifier "xt1") (identifier "yt1") (identifier "xf1") (identifier "yf1")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-B") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "st1") :sort (sort (identifier "S"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "xt1") :sort (sort (identifier "Int"))) (variable (identifier "yt1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "st2") :sort (sort (identifier "S"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "xf1") :sort (sort (identifier "Int"))) (variable (identifier "yf1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (application (identifier "ite") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (variable (identifier "xt1") :sort (sort (identifier "Int"))) (variable (identifier "xf1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (application (identifier "ite") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (variable (identifier "yt1") :sort (sort (identifier "Int"))) (variable (identifier "yf1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "sem-E") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :body (match :term (variable (identifier "et") :sort (sort (identifier "E"))) :binders (list (binder :operator (identifier "$x") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "sem-B") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r")) :body (match :term (variable (identifier "bt") :sort (sort (identifier "B"))) :binders (list (binder :operator (identifier "$<") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-E") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$and") :arguments (list (identifier "bt1") (identifier "bt2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-B") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "sem-B") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt2") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$not") :arguments (list (identifier "bt")) :child (exists :bindings (list (identifier "r1")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "sem-B") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(chc :head (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry"))) :body (list (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "rx") (identifier "ry")) :variables (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry") (identifier "r")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$=x") :arguments (list (identifier "et")) :argument-sorts (list (sort (identifier "E"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry"))) :body (list (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "rx") (identifier "ry")) :variables (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry") (identifier "r")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$=y") :arguments (list (identifier "et")) :argument-sorts (list (sort (identifier "E"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry"))) :body (list (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st1") (identifier "x") (identifier "y") (identifier "xi1") (identifier "yi1"))) (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st2") (identifier "xi1") (identifier "yi1") (identifier "rx") (identifier "ry")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "rx") (identifier "ry")) :variables (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry") (identifier "xi1") (identifier "yi1")) :constraint (term (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$seq") :arguments (list (identifier "st1") (identifier "st2")) :argument-sorts (list (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry"))) :body (list (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st1") (identifier "x") (identifier "y") (identifier "xt1") (identifier "yt1"))) (relation (identifier "sem-S") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "st2") (identifier "x") (identifier "y") (identifier "xf1") (identifier "yf1")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "rx") (identifier "ry")) :variables (list (identifier "st") (identifier "x") (identifier "y") (identifier "rx") (identifier "ry") (identifier "r") (identifier "xt1") (identifier "yt1") (identifier "xf1") (identifier "yf1")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "rx") :sort (sort (identifier "Int"))) (application (identifier "ite") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (variable (identifier "xt1") :sort (sort (identifier "Int"))) (variable (identifier "xf1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ry") :sort (sort (identifier "Int"))) (application (identifier "ite") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (variable (identifier "yt1") :sort (sort (identifier "Int"))) (variable (identifier "yf1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$ite") :arguments (list (identifier "bt") (identifier "st1") (identifier "st2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "sem-E") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$<") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool"))) (variable (identifier "r2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$and") :arguments (list (identifier "bt1") (identifier "bt2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "sem-B") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r1")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "r1")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$not") :arguments (list (identifier "bt")) :argument-sorts (list (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(synth-fun (identifier "max2") :term-type (sort (identifier "S")) :grammar (grammar :non-terminals (list (identifier "@S__agtt") (identifier "@E__agtt") (identifier "@B__agtt")) :non-terminal-types (list (sort (identifier "S")) (sort (identifier "E")) (sort (identifier "B"))) :productions (list (production :instance (identifier "@S__agtt") :occurrences (list (identifier "@E__agtt")) :operator (identifier "$=x")) (production :instance (identifier "@S__agtt") :occurrences (list (identifier "@E__agtt")) :operator (identifier "$=y")) (production :instance (identifier "@S__agtt") :occurrences (list (identifier "@S__agtt") (identifier "@S__agtt")) :operator (identifier "$seq")) (production :instance (identifier "@S__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@S__agtt") (identifier "@S__agtt")) :operator (identifier "$ite")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$x")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$y")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$1")) (production :instance (identifier "@E__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$+")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$<")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@B__agtt")) :operator (identifier "$and")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@B__agtt")) :operator (identifier "$not"))))) 
(constraint (term (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "max2") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "S"))) 4 2 4 2) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "sem-S") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "max2") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "S"))) 2 4 4 4) :return-sort (sort (identifier "Bool"))))) 
(check-synth)