 
(set-info :format-version) 
(set-info :realizable) 
(set-info :pbe) 
(declare-term-types (sort (identifier "L")) (sort (identifier "S")) (sort (identifier "E")) (sort (identifier "B"))) 
(add-constructor (sort (identifier "L")) :operator (identifier "$while") :children (list (sort (identifier "B")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "S")) :operator (identifier "$x++") :children (list)) 
(add-constructor (sort (identifier "S")) :operator (identifier "$x--") :children (list)) 
(add-constructor (sort (identifier "S")) :operator (identifier "$y++") :children (list)) 
(add-constructor (sort (identifier "S")) :operator (identifier "$y--") :children (list)) 
(add-constructor (sort (identifier "S")) :operator (identifier "$seq") :children (list (sort (identifier "S")) (sort (identifier "S")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$x") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$y") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$>") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$true") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$false") :children (list)) 
(declare-function (identifier "L.Sem") :rank (rank :argument-sorts (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "S.Sem") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "L.Sem") :rank (rank :argument-sorts (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_l") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :body (match :term (variable (identifier "t_l") :sort (sort (identifier "L"))) :binders (list (binder :operator (identifier "$while") :arguments (list (identifier "ltc") (identifier "ltb")) :child (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (exists :bindings (list (identifier "vc") (identifier "xt") (identifier "yt")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "ltc") :sort (sort (identifier "B"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "vc") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "ltb") :sort (sort (identifier "S"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "xt") :sort (sort (identifier "Int"))) (variable (identifier "yt") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "L.Sem") :argument-sorts (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t_l") :sort (sort (identifier "L"))) (variable (identifier "xt") :sort (sort (identifier "Int"))) (variable (identifier "yt") :sort (sort (identifier "Int"))) (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "yo") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (variable (identifier "vc") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (exists :bindings (list (identifier "vc")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "ltc") :sort (sort (identifier "B"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "vc") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "vc") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) :return-sort (sort (identifier "Bool"))))))))) 
(define-function (identifier "S.Sem") :rank (rank :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :body (match :term (variable (identifier "t_s") :sort (sort (identifier "S"))) :binders (list (binder :operator (identifier "$x++") :arguments (list) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$x--") :arguments (list) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y++") :arguments (list) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y--") :arguments (list) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$seq") :arguments (list (identifier "sta") (identifier "stb")) :child (exists :bindings (list (identifier "xt") (identifier "yt")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "sta") :sort (sort (identifier "S"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "xt") :sort (sort (identifier "Int"))) (variable (identifier "yt") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "S.Sem") :argument-sorts (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "stb") :sort (sort (identifier "S"))) (variable (identifier "xt") :sort (sort (identifier "Int"))) (variable (identifier "yt") :sort (sort (identifier "Int"))) (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "yo") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o")) :body (match :term (variable (identifier "t_e") :sort (sort (identifier "E"))) :binders (list (binder :operator (identifier "$x") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool"))))))))) 
(define-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o")) :body (match :term (variable (identifier "t_b") :sort (sort (identifier "B"))) :binders (list (binder :operator (identifier "$>") :arguments (list (identifier "btl") (identifier "btr")) :child (exists :bindings (list (identifier "vl") (identifier "vr")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "btl") :sort (sort (identifier "E"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "vl") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "btr") :sort (sort (identifier "E"))) (variable (identifier "xi") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int"))) (variable (identifier "vr") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier ">") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "vl") :sort (sort (identifier "Int"))) (variable (identifier "vr") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$true") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$false") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))))))) 
(chc :head (relation (identifier "L.Sem") :signature (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_l") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "ltc") (identifier "xi") (identifier "yi") (identifier "vc"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "ltb") (identifier "xi") (identifier "yi") (identifier "xt") (identifier "yt"))) (relation (identifier "L.Sem") :signature (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_l") (identifier "xt") (identifier "yt") (identifier "xo") (identifier "yo")))) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_l") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo") (identifier "vc") (identifier "xt") (identifier "yt")) :constraint (term (variable (identifier "vc") :sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$while") :arguments (list (identifier "ltc") (identifier "ltb")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S"))) :return-sort (sort (identifier "L")))) 
(chc :head (relation (identifier "L.Sem") :signature (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_l") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "ltc") (identifier "xi") (identifier "yi") (identifier "vc")))) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_l") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo") (identifier "vc")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "vc") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$while") :arguments (list (identifier "ltc") (identifier "ltb")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "S"))) :return-sort (sort (identifier "L")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x++") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x--") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y++") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "xo") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yo") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "yi") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y--") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo"))) :body (list (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "sta") (identifier "xi") (identifier "yi") (identifier "xt") (identifier "yt"))) (relation (identifier "S.Sem") :signature (list (sort (identifier "S")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "stb") (identifier "xt") (identifier "yt") (identifier "xo") (identifier "yo")))) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "xo") (identifier "yo")) :variables (list (identifier "t_s") (identifier "xi") (identifier "yi") (identifier "xo") (identifier "yo") (identifier "xt") (identifier "yt")) :constraint (term (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$seq") :arguments (list (identifier "sta") (identifier "stb")) :argument-sorts (list (sort (identifier "S")) (sort (identifier "S"))) :return-sort (sort (identifier "S")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) (variable (identifier "xi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) (variable (identifier "yi") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_e") (identifier "xi") (identifier "yi") (identifier "o")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "btl") (identifier "xi") (identifier "yi") (identifier "vl"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "btr") (identifier "xi") (identifier "yi") (identifier "vr")))) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o") (identifier "vl") (identifier "vr")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier ">") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "vl") :sort (sort (identifier "Int"))) (variable (identifier "vr") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$>") :arguments (list (identifier "btl") (identifier "btr")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$true") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o"))) :body (list) :input-variables (list (identifier "xi") (identifier "yi")) :output-variables (list (identifier "o")) :variables (list (identifier "t_b") (identifier "xi") (identifier "yi") (identifier "o")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "o") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$false") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(synth-fun (identifier "doublex") :term-type (sort (identifier "L")) :grammar (grammar :non-terminals (list (identifier "@L__agtt") (identifier "@B__agtt") (identifier "@E__agtt") (identifier "@S__agtt")) :non-terminal-types (list (sort (identifier "L")) (sort (identifier "B")) (sort (identifier "E")) (sort (identifier "S"))) :productions (list (production :instance (identifier "@L__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@S__agtt")) :operator (identifier "$while")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$>")) (production :instance (identifier "@B__agtt") :occurrences (list) :operator (identifier "$true")) (production :instance (identifier "@B__agtt") :occurrences (list) :operator (identifier "$false")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$x")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$y")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "@S__agtt") :occurrences (list) :operator (identifier "$x++")) (production :instance (identifier "@S__agtt") :occurrences (list) :operator (identifier "$x--")) (production :instance (identifier "@S__agtt") :occurrences (list) :operator (identifier "$y++")) (production :instance (identifier "@S__agtt") :occurrences (list) :operator (identifier "$y--")) (production :instance (identifier "@S__agtt") :occurrences (list (identifier "@S__agtt") (identifier "@S__agtt")) :operator (identifier "$seq"))))) 
(constraint (term (application (identifier "L.Sem") :argument-sorts (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "doublex") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "L"))) 0 0 0 0) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "L.Sem") :argument-sorts (list (sort (identifier "L")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "doublex") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "L"))) 2 0 0 4) :return-sort (sort (identifier "Bool"))))) 
(check-synth)