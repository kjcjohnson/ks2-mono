 
(declare-term-types (sort (identifier "E"))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$x") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$y") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$1") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$+") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$*") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(declare-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :body (match :term (variable (identifier "et") :sort (sort (identifier "E"))) :binders (list (binder :operator (identifier "$x") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$*") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "*") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(set-info :solution) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "*") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$*") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(synth-fun (identifier "f") :term-type (sort (identifier "E")) :grammar (grammar :non-terminals (list (identifier "@E__agtt")) :non-terminal-types (list (sort (identifier "E"))) :productions (list (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$x")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$y")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$1")) (production :instance (identifier "@E__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$+")) (production :instance (identifier "@E__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$*"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 2 3 64) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 0 0 1) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 1 1 16) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 5 3 196) :return-sort (sort (identifier "Bool"))))) 
(constraint (term (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) 2 2 49) :return-sort (sort (identifier "Bool"))))) 
(check-synth)