 
(declare-term-types (sort (identifier "E")) (sort (identifier "B"))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$x") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$y") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$1") :children (list)) 
(add-constructor (sort (identifier "E")) :operator (identifier "$+") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "E")) :operator (identifier "$ite") :children (list (sort (identifier "B")) (sort (identifier "E")) (sort (identifier "E")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$t") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$f") :children (list)) 
(add-constructor (sort (identifier "B")) :operator (identifier "$not") :children (list (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$and") :children (list (sort (identifier "B")) (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$or") :children (list (sort (identifier "B")) (sort (identifier "B")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$<") :children (list (sort (identifier "E")) (sort (identifier "E")))) 
(declare-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "E.Sem") :rank (rank :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :body (match :term (variable (identifier "et") :sort (sort (identifier "E"))) :binders (list (binder :operator (identifier "$x") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$y") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :child (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (exists :bindings (list (identifier "b")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (exists :bindings (list (identifier "b")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "t1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "b") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "t3") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) :return-sort (sort (identifier "Bool"))))))))) 
(define-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r")) :body (match :term (variable (identifier "bt") :sort (sort (identifier "B"))) :binders (list (binder :operator (identifier "$t") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$f") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$not") :arguments (list (identifier "bt1")) :child (exists :bindings (list (identifier "rb")) :binding-sorts (list (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "rb") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$and") :arguments (list (identifier "bt1") (identifier "bt2")) :child (exists :bindings (list (identifier "rb1") (identifier "rb2")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "rb1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt2") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb1") :sort (sort (identifier "Bool"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$or") :arguments (list (identifier "bt1") (identifier "bt2")) :child (exists :bindings (list (identifier "rb1") (identifier "rb2")) :binding-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt1") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "rb1") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "bt2") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb1") :sort (sort (identifier "Bool"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$<") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(set-info :test) 
(set-info :solution) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$x") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$y") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list (symbol-entry (identifier "r1") :sort (sort (identifier "Int"))) (symbol-entry (identifier "r2") :sort (sort (identifier "Int")))) :children (list (symbol-entry (identifier "et1") :sort (sort (identifier "E")) :index 0) (symbol-entry (identifier "et2") :sort (sort (identifier "E")) :index 1))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "b"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t2") (identifier "x") (identifier "y") (identifier "r")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "b")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list (symbol-entry (identifier "b") :sort (sort (identifier "Bool")))) :children (list (symbol-entry (identifier "t1") :sort (sort (identifier "B")) :index 0) (symbol-entry (identifier "t2") :sort (sort (identifier "E")) :index 1) (symbol-entry (identifier "t3") :sort (sort (identifier "E")) :index 2))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "t1") (identifier "x") (identifier "y") (identifier "b"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t3") (identifier "x") (identifier "y") (identifier "r")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "x") (identifier "y") (identifier "r") (identifier "b")) :symbols (symbol-table :term (symbol-entry (identifier "et") :sort (sort (identifier "E")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Int")) :index 3)) :auxiliary (list (symbol-entry (identifier "b") :sort (sort (identifier "Bool")))) :children (list (symbol-entry (identifier "t1") :sort (sort (identifier "B")) :index 0) (symbol-entry (identifier "t2") :sort (sort (identifier "E")) :index 1) (symbol-entry (identifier "t3") :sort (sort (identifier "E")) :index 2))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "b") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$ite") :arguments (list (identifier "t1") (identifier "t2") (identifier "t3")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "E")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$t") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "false") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$f") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt1") (identifier "x") (identifier "y") (identifier "rb")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "rb")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list (symbol-entry (identifier "rb") :sort (sort (identifier "Bool")))) :children (list (symbol-entry (identifier "bt1") :sort (sort (identifier "B")) :index 0))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "not") :argument-sorts (list (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$not") :arguments (list (identifier "bt1")) :argument-sorts (list (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt1") (identifier "x") (identifier "y") (identifier "rb1"))) (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt2") (identifier "x") (identifier "y") (identifier "rb2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "rb1") (identifier "rb2")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list (symbol-entry (identifier "rb1") :sort (sort (identifier "Bool"))) (symbol-entry (identifier "rb2") :sort (sort (identifier "Bool")))) :children (list (symbol-entry (identifier "bt1") :sort (sort (identifier "B")) :index 0) (symbol-entry (identifier "bt2") :sort (sort (identifier "B")) :index 1))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb1") :sort (sort (identifier "Bool"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$and") :arguments (list (identifier "bt1") (identifier "bt2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt1") (identifier "x") (identifier "y") (identifier "rb1"))) (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt2") (identifier "x") (identifier "y") (identifier "rb2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "rb1") (identifier "rb2")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list (symbol-entry (identifier "rb1") :sort (sort (identifier "Bool"))) (symbol-entry (identifier "rb2") :sort (sort (identifier "Bool")))) :children (list (symbol-entry (identifier "bt1") :sort (sort (identifier "B")) :index 0) (symbol-entry (identifier "bt2") :sort (sort (identifier "B")) :index 1))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "rb1") :sort (sort (identifier "Bool"))) (variable (identifier "rb2") :sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$or") :arguments (list (identifier "bt1") (identifier "bt2")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "B"))) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Bool"))) :arguments (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r"))) :body (list (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "x") (identifier "y") (identifier "r1"))) (relation (identifier "E.Sem") :signature (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "x") (identifier "y") (identifier "r2")))) :input-variables (list (identifier "x") (identifier "y")) :output-variables (list (identifier "r")) :variables (list (identifier "bt") (identifier "x") (identifier "y") (identifier "r") (identifier "r1") (identifier "r2")) :symbols (symbol-table :term (symbol-entry (identifier "bt") :sort (sort (identifier "B")) :index 0) :inputs (list (symbol-entry (identifier "x") :sort (sort (identifier "Int")) :index 1) (symbol-entry (identifier "y") :sort (sort (identifier "Int")) :index 2)) :outputs (list (symbol-entry (identifier "r") :sort (sort (identifier "Bool")) :index 3)) :auxiliary (list (symbol-entry (identifier "r1") :sort (sort (identifier "Int"))) (symbol-entry (identifier "r2") :sort (sort (identifier "Int")))) :children (list (symbol-entry (identifier "et1") :sort (sort (identifier "E")) :index 0) (symbol-entry (identifier "et2") :sort (sort (identifier "E")) :index 1))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Bool"))) (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$<") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "E")) (sort (identifier "E"))) :return-sort (sort (identifier "B")))) 
(synth-fun (identifier "max2") :term-type (sort (identifier "E")) :grammar (grammar :non-terminals (list (identifier "@E__agtt") (identifier "@B__agtt")) :non-terminal-types (list (sort (identifier "E")) (sort (identifier "B"))) :productions (list (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$x")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$y")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "@E__agtt") :occurrences (list) :operator (identifier "$1")) (production :instance (identifier "@E__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$+")) (production :instance (identifier "@E__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$ite")) (production :instance (identifier "@B__agtt") :occurrences (list) :operator (identifier "$t")) (production :instance (identifier "@B__agtt") :occurrences (list) :operator (identifier "$f")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@B__agtt")) :operator (identifier "$not")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@B__agtt")) :operator (identifier "$and")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@B__agtt")) :operator (identifier "$or")) (production :instance (identifier "@B__agtt") :occurrences (list (identifier "@E__agtt") (identifier "@E__agtt")) :operator (identifier "$<"))))) 
(constraint (term (forall :bindings (list (identifier "x") (identifier "y")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (exists :bindings (list (identifier "z")) :binding-sorts (list (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "E.Sem") :argument-sorts (list (sort (identifier "E")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "max2") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "E"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "z") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=>") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier ">=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=>") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier ">=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y") :sort (sort (identifier "Int"))) (variable (identifier "x") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "z") :sort (sort (identifier "Int"))) (variable (identifier "y") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))))) 
(check-synth)