 
(set-info :format-version) 
(set-info :realizable) 
(set-info :pbe) 
(declare-term-types (sort (identifier "A")) (sort (identifier "B")) (sort (identifier "C"))) 
(add-constructor (sort (identifier "A")) :operator (identifier "$a") :children (list (sort (identifier "B")) (sort (identifier "C")))) 
(add-constructor (sort (identifier "B")) :operator (identifier "$b") :children (list)) 
(add-constructor (sort (identifier "C")) :operator (identifier "$c") :children (list)) 
(declare-function (identifier "A.Sem") :rank (rank :argument-sorts (list (sort (identifier "A")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "C.Sem") :rank (rank :argument-sorts (list (sort (identifier "C")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "A.Sem") :rank (rank :argument-sorts (list (sort (identifier "A")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_a") (identifier "x") (identifier "y")) :body (match :term (variable (identifier "t_a") :sort (sort (identifier "A"))) :binders (list (binder :operator (identifier "$a") :arguments (list (identifier "etb") (identifier "etc")) :child (exists :bindings (list (identifier "p") (identifier "q")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "B.Sem") :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "etb") :sort (sort (identifier "B"))) (variable (identifier "x") :sort (sort (identifier "Int"))) (variable (identifier "p") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "C.Sem") :argument-sorts (list (sort (identifier "C")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "etc") :sort (sort (identifier "C"))) (variable (identifier "p") :sort (sort (identifier "Int"))) (variable (identifier "q") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier ">") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "p") :sort (sort (identifier "Int"))) (variable (identifier "q") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "B.Sem") :rank (rank :argument-sorts (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_b") (identifier "x") (identifier "p")) :body (match :term (variable (identifier "t_b") :sort (sort (identifier "B"))) :binders (list (binder :operator (identifier "$b") :arguments (list) :child (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool"))))))))) 
(define-function (identifier "C.Sem") :rank (rank :argument-sorts (list (sort (identifier "C")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "t_c") (identifier "p") (identifier "q")) :body (match :term (variable (identifier "t_c") :sort (sort (identifier "C"))) :binders (list (binder :operator (identifier "$c") :arguments (list) :child (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "p") :sort (sort (identifier "Int"))) (variable (identifier "q") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))))))))) 
(chc :head (relation (identifier "A.Sem") :signature (list (sort (identifier "A")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_a") (identifier "x") (identifier "y"))) :body (list (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "etb") (identifier "x") (identifier "p"))) (relation (identifier "C.Sem") :signature (list (sort (identifier "C")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "etc") (identifier "p") (identifier "q")))) :input-variables (list (identifier "x")) :output-variables (list (identifier "y")) :variables (list (identifier "t_a") (identifier "x") (identifier "y") (identifier "p") (identifier "q")) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier ">") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "p") :sort (sort (identifier "Int"))) (variable (identifier "q") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "y") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$a") :arguments (list (identifier "etb") (identifier "etc")) :argument-sorts (list (sort (identifier "B")) (sort (identifier "C"))) :return-sort (sort (identifier "A")))) 
(chc :head (relation (identifier "B.Sem") :signature (list (sort (identifier "B")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_b") (identifier "x") (identifier "p"))) :body (list) :input-variables (list (identifier "x")) :output-variables (list (identifier "p")) :variables (list (identifier "t_b") (identifier "x") (identifier "p")) :constraint (term (application (identifier "true") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$b") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "B")))) 
(chc :head (relation (identifier "C.Sem") :signature (list (sort (identifier "C")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "t_c") (identifier "p") (identifier "q"))) :body (list) :input-variables (list (identifier "p")) :output-variables (list (identifier "q")) :variables (list (identifier "t_c") (identifier "p") (identifier "q")) :constraint (term (application (identifier "<") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "p") :sort (sort (identifier "Int"))) (variable (identifier "q") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$c") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "C")))) 
(synth-fun (identifier "f") :term-type (sort (identifier "A")) :grammar (grammar :non-terminals (list (identifier "@A__agtt") (identifier "@B__agtt") (identifier "@C__agtt")) :non-terminal-types (list (sort (identifier "A")) (sort (identifier "B")) (sort (identifier "C"))) :productions (list (production :instance (identifier "@A__agtt") :occurrences (list (identifier "@B__agtt") (identifier "@C__agtt")) :operator (identifier "$a")) (production :instance (identifier "@B__agtt") :occurrences (list) :operator (identifier "$b")) (production :instance (identifier "@C__agtt") :occurrences (list) :operator (identifier "$c"))))) 
(constraint (term (application (identifier "A.Sem") :argument-sorts (list (sort (identifier "A")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "f") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "A"))) 0 1) :return-sort (sort (identifier "Bool"))))) 
(check-synth)