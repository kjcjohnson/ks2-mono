 
(set-info :format-version) 
(set-info :author) 
(set-info :realizable) 
(declare-term-types (sort (identifier "Start"))) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$fc") :children (list)) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$fx") :children (list)) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$0") :children (list)) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$1") :children (list)) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$+") :children (list (sort (identifier "Start")) (sort (identifier "Start")))) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$-") :children (list (sort (identifier "Start")) (sort (identifier "Start")))) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$mux") :children (list (sort (identifier "Start")) (sort (identifier "Start")))) 
(declare-function (identifier "Sem") :rank (rank :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "Sem") :rank (rank :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r")) :body (match :term (variable (identifier "et") :sort (sort (identifier "Start"))) :binders (list (binder :operator (identifier "$fc") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "fc") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$fx") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$0") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$-") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$mux") :arguments (list (identifier "et1") (identifier "et2")) :child (exists :bindings (list (identifier "r1") (identifier "r2")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et1") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "et2") :sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "fc") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$fc") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$fx") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 0) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$0") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) 1) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "fc") (identifier "fx") (identifier "r1"))) (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "fc") (identifier "fx") (identifier "r2")))) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$+") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Start"))) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "fc") (identifier "fx") (identifier "r1"))) (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "fc") (identifier "fx") (identifier "r2")))) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r1") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$-") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Start"))) :return-sort (sort (identifier "Start")))) 
(chc :head (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r"))) :body (list (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et1") (identifier "fc") (identifier "fx") (identifier "r1"))) (relation (identifier "Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (identifier "et2") (identifier "fc") (identifier "fx") (identifier "r2")))) :input-variables (list (identifier "fc") (identifier "fx")) :output-variables (list (identifier "r")) :variables (list (identifier "et") (identifier "fc") (identifier "fx") (identifier "r") (identifier "r1") (identifier "r2")) :constraint (term (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "r1") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "r") :sort (sort (identifier "Int"))) (variable (identifier "r2") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$mux") :arguments (list (identifier "et1") (identifier "et2")) :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Start"))) :return-sort (sort (identifier "Start")))) 
(synth-fun (identifier "ring") :term-type (sort (identifier "Start")) :grammar (grammar :non-terminals (list (identifier "@Start__agtt")) :non-terminal-types (list (sort (identifier "Start"))) :productions (list (production :instance (identifier "@Start__agtt") :occurrences (list) :operator (identifier "$fc")) (production :instance (identifier "@Start__agtt") :occurrences (list) :operator (identifier "$fx")) (production :instance (identifier "@Start__agtt") :occurrences (list) :operator (identifier "$0")) (production :instance (identifier "@Start__agtt") :occurrences (list) :operator (identifier "$1")) (production :instance (identifier "@Start__agtt") :occurrences (list (identifier "@Start__agtt") (identifier "@Start__agtt")) :operator (identifier "$+")) (production :instance (identifier "@Start__agtt") :occurrences (list (identifier "@Start__agtt") (identifier "@Start__agtt")) :operator (identifier "$-")) (production :instance (identifier "@Start__agtt") :occurrences (list (identifier "@Start__agtt") (identifier "@Start__agtt")) :operator (identifier "$mux"))))) 
(constraint (term (forall :bindings (list (identifier "fc") (identifier "fx") (identifier "r")) :binding-sorts (list (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :child (application (identifier "=") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Int")) (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "ring") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Start"))) (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "or") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "+") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (application (identifier "-") :argument-sorts (list (sort (identifier "Int")) (sort (identifier "Int"))) :arguments (list (variable (identifier "fc") :sort (sort (identifier "Int"))) (variable (identifier "fx") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Int"))) (variable (identifier "r") :sort (sort (identifier "Int")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))) 
(check-synth)